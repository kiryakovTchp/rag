#!/bin/bash

# S4-1 WebSocket Acceptance Script
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–≤—è–∑–∫—É –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏ API —á–µ—Ä–µ–∑ Redis Pub/Sub

set -e

echo "üîç S4-1 WebSocket Acceptance Check"
echo "=================================="

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ API –≤ workers
echo "1Ô∏è‚É£ Checking for API imports in workers..."
if grep -R "from api.websocket" workers/ 2>/dev/null; then
    echo "‚ùå Found API imports in workers - FAILED"
    exit 1
else
    echo "‚úÖ No API imports found in workers"
fi

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
echo "2Ô∏è‚É£ Testing Redis connection..."
if redis-cli PING | grep -q "PONG"; then
    echo "‚úÖ Redis connection successful"
else
    echo "‚ùå Redis connection failed"
    exit 1
fi

# 3. –ó–∞–ø—É—Å–∫–∞–µ–º smoke —Ç–µ—Å—Ç
echo "3Ô∏è‚É£ Running WebSocket smoke test..."
if python3 scripts/ws_smoke.py; then
    echo "‚úÖ WebSocket smoke test passed"
else
    echo "‚ùå WebSocket smoke test failed"
    exit 1
fi

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π WebSocket –∫–ª–∏–µ–Ω—Ç
echo "4Ô∏è‚É£ Testing real WebSocket client..."
if python3 -c "
import asyncio
import websockets
import json
from services.events.bus import publish_event

async def test_real_ws():
    try:
        # Connect to WebSocket
        uri = 'ws://localhost:8000/ws/jobs'
        websocket = await websockets.connect(uri)
        
        # Wait for connection confirmation
        message = await asyncio.wait_for(websocket.recv(), timeout=5)
        data = json.loads(message)
        if data.get('event') != 'connected':
            raise Exception('Expected connected event')
        
        # Publish test event
        await publish_event('test_tenant.jobs', {
            'event': 'test_event',
            'job_id': 999,
            'document_id': 888,
            'type': 'test'
        })
        
        # Wait for event
        message = await asyncio.wait_for(websocket.recv(), timeout=5)
        data = json.loads(message)
        if data.get('event') != 'test_event':
            raise Exception('Expected test_event')
        
        await websocket.close()
        return True
    except Exception as e:
        print(f'WebSocket test failed: {e}')
        return False

result = asyncio.run(test_real_ws())
exit(0 if result else 1)
"; then
    echo "‚úÖ Real WebSocket client test passed"
else
    echo "‚ùå Real WebSocket client test failed"
    exit 1
fi

echo ""
echo "üéâ S4-1 WebSocket acceptance check PASSED!"
echo "‚úÖ Workers decoupled from API"
echo "‚úÖ Redis Pub/Sub working"
echo "‚úÖ WebSocket real-time status working"
