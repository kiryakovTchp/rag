services:
  # PostgreSQL с pgvector
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: rag_db
      POSTGRES_USER: rag_user
      POSTGRES_PASSWORD: rag_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rag_user} -d ${POSTGRES_DB:-rag_db}"]
      interval: 5s
      timeout: 3s
      retries: 20

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL","redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 20

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: infra/Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://rag_user:rag_password@db:5432/rag_db
      - REDIS_URL=redis://redis:6379
      - EMBED_PROVIDER=${EMBED_PROVIDER:-ollama}
      - RERANK_ENABLED=${RERANK_ENABLED:-false}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
      - S3_BUCKET=${S3_BUCKET:-promoai}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - WORKERS_AI_TOKEN=${WORKERS_AI_TOKEN}
      - WORKERS_AI_URL=${WORKERS_AI_URL}
      - WORKERS_AI_RERANK_URL=${WORKERS_AI_RERANK_URL}
      - WORKERS_AI_API_KEY=${WORKERS_AI_API_KEY}
      - OLLAMA_HOST=${OLLAMA_HOST}
    volumes:
      - ./api:/app/api
      - ./services:/app/services
      - ./db:/app/db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: bash -c "alembic -c /app/alembic.ini upgrade head && uvicorn api.main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Celery Workers
  worker:
    build:
      context: .
      dockerfile: infra/Dockerfile.worker
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}/0
      - CELERY_RESULT_BACKEND=${REDIS_URL}/0
      - EMBED_PROVIDER=${EMBED_PROVIDER:-ollama}
      - EMBED_PROVIDER_FALLBACK=${EMBED_PROVIDER_FALLBACK:-true}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
      - S3_BUCKET=${S3_BUCKET:-promoai}
      - OLLAMA_HOST=${OLLAMA_HOST}
    volumes:
      - ./services:/app/services
      - ./workers:/app/workers
    depends_on:
      ollama:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A workers.app worker --loglevel=info

  # Frontend (Vite dev server)
  frontend:
    build:
      context: ./web
      dockerfile: ../infra/Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - VITE_WS_URL=${VITE_WS_URL}
      - VITE_AUTH_ENABLED=${VITE_AUTH_ENABLED}
      - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
    volumes: []
    depends_on:
      api:
        condition: service_healthy

  # MinIO (S3-compatible storage) for dev
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio:/data

  # Ollama LLM/Embeddings server (optional, for local use)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    restart: unless-stopped

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  minio:
