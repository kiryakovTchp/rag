#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API PromoAI RAG
"""

import json
import time
from typing import Any, Dict, Optional

import requests  # type: ignore


def test_health() -> bool:
    """–¢–µ—Å—Ç health endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...")
    try:
        response = requests.get("http://localhost:8000/healthz")
        if response.status_code == 200:
            print("‚úÖ Health check passed")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False


def test_ingest() -> Optional[int]:
    """–¢–µ—Å—Ç ingest endpoint"""
    print("üì§ –¢–µ—Å—Ç–∏—Ä—É–µ–º ingest endpoint...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_content = """# Test Document

This is a test document for the RAG system.

## Section 1
Some content here.

## Section 2
More content with **bold** and *italic* text.

| Name | Age | City |
|------|-----|------|
| John | 25  | NYC  |
| Jane | 30  | LA   |
"""

        files = {"file": ("test_document.txt", test_content, "text/plain")}
        data = {"tenant_id": "test", "safe_mode": "false"}

        response = requests.post("http://localhost:8000/ingest", files=files, data=data)

        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Ingest successful: {result}")
            return result["job_id"]
        else:
            print(f"‚ùå Ingest failed: {response.status_code} - {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå Ingest error: {e}")
        return None


def test_job_status(job_id: int) -> Optional[Dict[str, Any]]:
    """–¢–µ—Å—Ç job status endpoint"""
    print(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º job status –¥–ª—è job_id={job_id}...")
    try:
        max_attempts = 30
        for _ in range(max_attempts):
            response = requests.get(f"http://localhost:8000/ingest/{job_id}")

            if response.status_code == 200:
                result = response.json()
                status = result["status"]
                progress = result["progress"]

                print(f"üìà Status: {status}, Progress: {progress}%")

                if status == "done":
                    print("‚úÖ Job completed successfully!")
                    return result
                elif status == "error":
                    print(f"‚ùå Job failed: {result.get('error', 'Unknown error')}")
                    return result
                else:
                    time.sleep(2)
            else:
                print(f"‚ùå Job status failed: {response.status_code}")
                return None

        print("‚è∞ Job timeout")
        return None
    except Exception as e:
        print(f"‚ùå Job status error: {e}")
        return None


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PromoAI RAG API")
    print("=" * 50)

    # –¢–µ—Å—Ç 1: Health check
    if not test_health():
        print("‚ùå Health check failed, exiting")
        return

    # –¢–µ—Å—Ç 2: Ingest
    job_id = test_ingest()
    if not job_id:
        print("‚ùå Ingest failed, exiting")
        return

    # –¢–µ—Å—Ç 3: Job status polling
    result = test_job_status(job_id)
    if result:
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2)}")
    else:
        print("‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")


if __name__ == "__main__":
    main()
